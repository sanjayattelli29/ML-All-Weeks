
### 🧑‍💻 Complete Code:

```python
import numpy as np

# Sigmoid activation function and its derivative
def sigmoid(x):
    return 1 / (1 + np.exp(-x))

def sigmoid_derivative(x):
    return x * (1 - x)

class NeuralNetwork:
    def __init__(self, input_size, hidden_size, output_size):
        self.input_size = input_size
        self.hidden_size = hidden_size
        self.output_size = output_size
        self.weights_input_hidden = np.random.randn(self.input_size, self.hidden_size)
        self.weights_hidden_output = np.random.randn(self.hidden_size, self.output_size)
        self.bias_hidden = np.zeros((1, self.hidden_size))
        self.bias_output = np.zeros((1, self.output_size))

    def forward_propagation(self, X):
        self.hidden_input = np.dot(X, self.weights_input_hidden) + self.bias_hidden
        self.hidden_output = sigmoid(self.hidden_input)
        self.output_input = np.dot(self.hidden_output, self.weights_hidden_output) + self.bias_output
        self.output = sigmoid(self.output_input)
        return self.output

    def backward_propagation(self, X, y, learning_rate=0.1):
        output_error = y - self.output
        output_delta = output_error * sigmoid_derivative(self.output)
        hidden_error = output_delta.dot(self.weights_hidden_output.T)
        hidden_delta = hidden_error * sigmoid_derivative(self.hidden_output)

        self.weights_input_hidden += X.T.dot(hidden_delta) * learning_rate
        self.weights_hidden_output += self.hidden_output.T.dot(output_delta) * learning_rate
        self.bias_hidden += np.sum(hidden_delta, axis=0, keepdims=True) * learning_rate
        self.bias_output += np.sum(output_delta, axis=0, keepdims=True) * learning_rate

    def train(self, X, y, epochs=10000, learning_rate=0.1):
        for _ in range(epochs):
            self.forward_propagation(X)
            self.backward_propagation(X, y, learning_rate)

    def predict(self, X):
        return self.forward_propagation(X)

# XOR Problem: Input and output
X = np.array([[0, 0],
              [0, 1],
              [1, 0],
              [1, 1]])

y = np.array([[0],
              [1],
              [1],
              [0]])

# Neural Network setup
input_size = 2
hidden_size = 4
output_size = 1
nn = NeuralNetwork(input_size, hidden_size, output_size)

# Train the neural network
nn.train(X, y, epochs=10000, learning_rate=0.1)

# Predictions
predictions = nn.predict(X)
print("Predictions after training:\n", predictions)
```

### 🧑‍💻 How to Execute:

1. **Save the Code** as `simple_nn.py`.

2. **Install NumPy** if not installed:

   ```bash
   pip install numpy
   ```

3. **Run the Code**:

   ```bash
   python simple_nn.py
   ```

### 📝 Sample Data (XOR Problem):

```text
X = np.array([[0, 0],
              [0, 1],
              [1, 0],
              [1, 1]])

y = np.array([[0],  # 0 XOR 0 = 0
              [1],  # 0 XOR 1 = 1
              [1],  # 1 XOR 0 = 1
              [0]])  # 1 XOR 1 = 0
```

### 💻 Expected Output:

```text
Predictions after training:
 [[0.01866145]
 [0.9825895 ]
 [0.98276529]
 [0.01607951]]
```

---

### 🧑‍💻 Steps to Execute:

1. **Install Python** if you don’t have it installed.
2. **Install dependencies** with `pip install numpy`.
3. **Run** the Python file using `python simple_nn.py`.

Let me know if you need further customization!
