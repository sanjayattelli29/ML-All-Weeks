Here's your **full Python code** to implement the **Naive Bayes Classifier** for **Week 9**, using data from a CSV file. This includes:

* Reading the dataset
* Splitting into train/test sets
* Training using `GaussianNB`
* Making predictions
* Calculating accuracy
* Showing correct vs incorrect predictions

✅ This works well with **numeric features** and a **categorical target** (e.g., Iris dataset or custom CSVs).

---

## ✅ WEEK 9: Naive Bayes Classifier (Full Code with Accuracy)

```python
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score

# Step 1: Load dataset from CSV
filename = "iris.csv"  # Replace with your filename
data = pd.read_csv(filename)
print("First 5 rows:\n", data.head())

# Step 2: Separate features and target column
X = data.iloc[:, :-1]  # All columns except last = Features
y = data.iloc[:, -1]   # Last column = Target/Label

# Step 3: Encode target if categorical (e.g., 'Iris-setosa' -> 0, 1, 2...)
if y.dtype == 'object':
    le = LabelEncoder()
    y = le.fit_transform(y)

# Step 4: Split into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Step 5: Train Naive Bayes Model
model = GaussianNB()
model.fit(X_train, y_train)

# Step 6: Predict on test set
y_pred = model.predict(X_test)

# Step 7: Compute and display accuracy
accuracy = accuracy_score(y_test, y_pred)
print(f"\nModel Accuracy: {accuracy * 100:.2f}%")

# Step 8: Show correct and incorrect predictions
print("\n--- Predictions ---")
for i in range(len(y_test)):
    actual = y_test[i] if isinstance(y_test, list) else y_test.tolist()[i]
    predicted = y_pred[i]
    result = "✅ Correct" if actual == predicted else "❌ Incorrect"
    print(f"Sample {i+1}: Actual = {actual}, Predicted = {predicted} -> {result}")
```

---

### 📁 Sample CSV Format (`iris.csv`):

```
sepal_length,sepal_width,petal_length,petal_width,class
5.1,3.5,1.4,0.2,Iris-setosa
4.9,3.0,1.4,0.2,Iris-setosa
6.2,2.8,4.8,1.8,Iris-virginica
...
```

---

### 🧪 How to Run:

1. Save the code to a file like `naive_bayes_classifier.py`.
2. Place your dataset CSV in the same folder.
3. Install needed libraries (once):

```bash
pip install pandas scikit-learn
```

4. Run it:

```bash
python naive_bayes_classifier.py
```

---

### 💡 Key Concepts

| Step            | Explanation                                                      |
| --------------- | ---------------------------------------------------------------- |
| LabelEncoder    | Converts text labels (e.g., "Yes", "No") to numbers              |
| GaussianNB      | Assumes data follows normal distribution (good for numeric data) |
| accuracy\_score | Compares predicted vs actual values                              |

---

Would you like an example dataset (`iris.csv`) to test with immediately?
