Absolutely! Here's a **complete and easy-to-understand K-Nearest Neighbors (KNN)** classifier program in Python that works with **any standard CSV file**, like the Iris dataset (or similar ones with features and a target label column).

---

### ✅ **🔁 Works for Any CSV file with:**

* **Numeric features** (X columns).
* **Categorical or numeric labels** (Y column).
* CSV must have **column headers**.

---

### ✅ **FULL PYTHON CODE: KNN CLASSIFIER (with prediction report)**

```python
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score

# Step 1: Load CSV
filename = 'iris.csv'  # change to your file name
data = pd.read_csv(filename)
print("First 5 rows of dataset:\n", data.head())

# Step 2: Auto-separate features (X) and label (y)
# Assumes last column is the target label
X = data.iloc[:, :-1]  # all rows, all columns except last
y = data.iloc[:, -1]   # all rows, last column only

# Step 3: Encode labels (if categorical)
if y.dtype == 'object':
    le = LabelEncoder()
    y = le.fit_transform(y)

# Step 4: Split Data into Train/Test
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 5: Create and Train KNN model
k = 3  # choose number of neighbors
model = KNeighborsClassifier(n_neighbors=k)
model.fit(X_train, y_train)

# Step 6: Make Predictions
y_pred = model.predict(X_test)

# Step 7: Print Accuracy
print("\nAccuracy:", accuracy_score(y_test, y_pred))

# Step 8: Print Predictions (correct and incorrect)
print("\n--- Prediction Results ---")
for i in range(len(y_test)):
    actual = y_test.iloc[i] if isinstance(y_test, pd.Series) else y_test[i]
    predicted = y_pred[i]
    result = "Correct ✅" if actual == predicted else "Wrong ❌"
    print(f"Sample {i+1} => Actual: {actual} | Predicted: {predicted} => {result}")
```

---

### ▶️ **HOW TO RUN THIS**

1. 📁 **Prepare your CSV file** (`iris.csv` example):

```
sepal_length,sepal_width,petal_length,petal_width,class
5.1,3.5,1.4,0.2,Iris-setosa
4.9,3.0,1.4,0.2,Iris-setosa
...
```

2. ✅ **Install Required Libraries (if needed):**

```bash
pip install pandas scikit-learn
```

3. 🐍 **Run the code** with:

```bash
python knn_classifier.py
```

---

### 💡 Notes

* `k = 3` is a common default. You can experiment with `k = 5`, `7`, etc.
* Make sure the last column in the CSV is the **label/class** column.
* It handles **both numeric and string labels** using `LabelEncoder`.

Would you like a test `iris.csv` sample to use immediately?
